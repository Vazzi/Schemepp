(define (caar lst)
    (car(car lst))
)
(define (caaar lst)
    (car(car(car lst)))
)
(define (cdar lst)
    (cdr(car lst))
)
(define (cdaar lst)
    (cdr(car(car lst)))
)

(define (load_edges e edges)
    (if (eq? e 0)
        edges
        (load_edges (- e 1) (add_edge (read) (read) (read) edges))
    )
)

(define (load_queries q edges k)
    (if (eq? q 0)
        '()
        (let ()
            (if (eq? k 0)
                '()
                (let () (if (eq? k 1) '() (newline)) (write 555 k)(newline))
            )
            (findpath (cons (cons (read) 0) '()) '() edges (read))
	    (fileNextLine)
	    (load_queries (- q 1) edges 0)		
        )
    )
)

(define ( process n e q k)
    (let () 
	(fileNextLine)
        (if (and (eq n 0) (eq e 0) (eq q 0))
	    (write 999)
	    (let () 
	        (load_queries q (load_edges e '()) k)
	        (process (read) (read) (read) (+ k 1))
	    )
        )
    )
)

(define ( add_edge from to noise edges)
    (let () 
        (fileNextLine)
        (cons (cons (cons to from) noise) (cons (cons (cons from to) noise) edges))
    )
)

(define (insert queue node noise)
    (if (eq? queue '())
        (cons (cons node noise) '())
        (if (> (cdar queue) noise)
             (cons (cons node noise) queue)
             (cons (car queue) (insert (cdr queue) node noise))
        )
    )
)

(define (top queue)
    (if (eq? queue '())
        '()
        (car queue)
    )
)

(define ( is_not_closed node closed_nodes)
    (if (eq? closed_nodes '())
        #t
        (if (eq? node (car closed_nodes))
            #f
            (is_not_closed node (cdr closed_nodes))
        )
    )
)

(define (close_node node closed_nodes)
    (if (eq? closed_nodes '())
        (cons node '())
        (if (eq? (car closed_nodes) node)
            closed_nodes
            (if (> (car closed_nodes) node)
                (cons node closed_nodes)
                (cons (car closed_nodes) (close_node node (cdr closed_nodes)))
            )
        )
    )
)

(define (expand node queue closed_nodes edges)
(let () 
    (if (eq? edges '())
        queue
	(let () 
        (if (and (eq? (car node) (caaar edges)) (is_not_closed (cdaar edges) closed_nodes))
         
            (if (< (cdr node) (cdar edges))
                (expand node (insert queue (cdaar edges) (cdar edges)) closed_nodes (cdr edges))
                (expand node (insert queue (cdaar edges) (cdr node)) closed_nodes (cdr edges))
            )
            (expand node queue closed_nodes (cdr edges))
        ))
    )
))

(define (findpath queue closed_nodes edges finish) 
    (if (eq? queue '())
	(let ()        
	    (write 222) 
	    (newline)
	)
	(if (eq? (car (top queue)) finish)
	    (let () (write (cdr (top queue)))(newline))
	    (if (is_not_closed (car (top queue)) closed_nodes)
	        (findpath (expand (top queue) (cdr queue) closed_nodes edges) (close_node (car (top queue)) closed_nodes) edges finish)
	        (findpath (cdr queue) closed_nodes edges finish)
	    )
	)
    )
)

(process (read) (read) (read) 1)

